#!/bin/bash
base="$( cd "$( dirname "${BASH_SOURCE[0]}" )/.." && pwd )"
set -eu

main() {
	cd $base
	rm -f $base/coverage.{info,txt} $base/*.gcda $base/*.gcno

	export GO111MODULE=on
	GO111MODULE=off go get -v golang.org/x/tools/cmd/stringer
	# go get -v github.com/golang/protobuf/protoc-gen-go
	ensure_golangci_lint
	go generate ./...
	go build ./...
	go test -timeout=11s -race -coverprofile=$base/coverage.txt -covermode=atomic ./...
	go test -bench=. -vet= ./...
	go mod tidy
	golangci-lint run
	git diff --exit-code
}

ensure_golangci_lint() {
	golangci-lint -h &>/dev/null && return 0

	echo "$0: golangci-lint is not installed; CI should just work" >&2
	if [[ -z ${CI} ]] ; then
		confirm "Local dev? Install golangci-lint? [yN] " || return 1
	fi
	(
		set -eux
		cd $(mktemp -d)
		export GO111MODULE=on
		go mod init tmp
		go get github.com/golangci/golangci-lint/cmd/golangci-lint
		rm -rf $PWD
	)
}

confirm() {
    local reply
    local prompt="$1"
    read -n1 -p "$prompt" -t31 reply >&2
    echo "" >&2
    local rc=0
    local default_y=" \[Yn\] $"
    if [[ -z "$reply" ]] && [[ "$prompt" =~ $default_y ]] ; then
        reply="y"
    fi
    [[ "$reply" != "y" ]] && rc=1
    return $rc
}

if [[ "${BASH_SOURCE[0]}" == "${0}" ]] ; then
  main "$@"
fi
